@page "/Login"

@rendermode InteractiveWebAssembly

@inject ILocalStorageService LocalStorage
@inject IConfiguration Configuration
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject IToastService Toaster

<Blazored.Toast.BlazoredToasts />

<h3>Login</h3>

<EditForm Model="User" OnValidSubmit="HandleLoginAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username">Name</label>
        <InputText id="username" @bind-Value="User.Username" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="User.Password" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Do it!</button>
</EditForm> 

@code {
    private LoginOrRegisterRequestDto User { get; set; } = new();
    private string LoginError { get; set; } = string.Empty;

    private async Task HandleLoginAsync()
    {
        try
        {
            var result = await Http.PostAsJsonAsync<LoginOrRegisterRequestDto>("api/Auth/Login", User);

            if (result.IsSuccessStatusCode)
            {
                var jwtDto = await result.Content.ReadFromJsonAsync<JwtDto>();

                if (jwtDto is not null)
                {
                    await LocalStorage.SetItemAsync("TOKEN", jwtDto.Token);
                    if (AuthStateProvider is CustomAuthStateProvider customProvider)
                    {
                        Console.WriteLine("Marked as logged in");
                        customProvider.MarkUserAsAuthenticated(jwtDto.Token);
                    }

                    Toaster.ShowSuccess("You have successfully logged in.");

                    // NavManager.NavigateTo("");
                }
            }
            else
            {
                LoginError = "Invalid username or password. Please try again.";
                await LocalStorage.RemoveItemAsync("TOKEN");
                if (AuthStateProvider is CustomAuthStateProvider customProvider)
                {
                    Console.WriteLine("Marked as logged out");
                    customProvider.MarkUserAsLoggedOut();
                }
            }
        }
        catch (Exception ex)
        {
            LoginError = "An error occurred while trying to log in. Please try again later.";
            Console.Error.WriteLine(ex.Message);
        }
        await CheckAuthState();
    }

    private async Task CheckAuthState()
    {
        try
        {
            // Get the current authentication state
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                // User is authenticated
                Toaster.ShowSuccess($"User is authenticated as {user.Identity.Name}");
            }
            else
            {
                // User is not authenticated
                Toaster.ShowWarning("User is not authenticated.");
            }
        }
        catch (Exception ex)
        {
            // Handle errors
            Toaster.ShowError($"Error checking authentication state: {ex.Message}");
        }
    }
}