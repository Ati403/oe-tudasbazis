@page "/"
@using BlazorBootstrap;

@inject HttpClient HttpClient

<PageTitle>Főoldal</PageTitle>

<div class="home-container">
	<h1>Tedd fel a kérdésed az egyetemmel kapcsolatban</h1>

    @if (!string.IsNullOrEmpty(ApiResponse))
    {
        <div class="response-box">
            <p>@ApiResponse</p>
        </div>
    }

    @if (IsLoading)
    {
        <div class="loading-indicator">
            <Spinner Type="SpinnerType.Border" Color="SpinnerColor.Primary"/>
        </div>
    }

    <div class="input-container">
        <div class="user-input-container">
            <textarea class="user-input"
                      @bind="UserInput"
                      rows="2"
                      placeholder="Üzenet az ÓE tudásbázisnak"
                      style="resize:both;"
                      oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';">
            </textarea>
        </div>

        <div class="d-flex">
            <button class="search-button" @onclick="GetAnswerAsync">
                <Icon Name="IconName.Search" />
            </button>
        </div>
    </div>
</div>

@code {
    private string UserInput { get; set; } = string.Empty;
    private string? ApiResponse { get; set; }
    private bool IsLoading { get; set; } = false;

    private async void GetAnswerAsync()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            var searchRequestDto = new AnswerRequestDto
                {
                    Question = UserInput
                };

            var response = await HttpClient.PostAsJsonAsync(new Uri("api/Search/answer", UriKind.Relative), searchRequestDto);

            if (response.IsSuccessStatusCode)
            {
                var searchResult = await response.Content.ReadFromJsonAsync<SearchResultDto>();

                if (searchResult is not null)
                {
                    ApiResponse = searchResult.Answer;
                }
            }
        }
        catch (Exception)
        {
            //TODO
            //Toaster error handling
            ApiResponse = "Hiba a válaszadás során.";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
}